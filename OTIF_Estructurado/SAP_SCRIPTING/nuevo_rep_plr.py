import win32com.client
from datetime import datetime
import os
import pandas as pd
import time
import json

# Check if the current time is after 2 PM
current_hour = datetime.now().hour
if current_hour <= 14:
    today_date_sap_format = datetime.today().strftime('%Y%m%d')
    
    # File path and name
    file_name = "REP_PLR_HOY.xls"
    saved_path = os.path.join(os.environ["USERPROFILE"], "Documents", file_name)
    
    # Remove file if it already exists
    if os.path.exists(saved_path):
        os.remove(saved_path)
    
    # Connect to SAP GUI
    try:
        sap_gui_auto = win32com.client.GetObject("SAPGUI")
        application = sap_gui_auto.GetScriptingEngine
        connection = application.Children(0)
        session = connection.Children(0)
    except Exception as e:
        print(f"Error connecting to SAP: {e}")
        exit()
        
    # SAP automation
    try:
        session.findById("wnd[0]").maximize()
        session.findById("wnd[0]/tbar[0]/okcd").text = "zsd_rep_planeamiento"
        session.findById("wnd[0]").sendVKey(0)
        
        session.findById("wnd[0]/tbar[1]/btn[17]").press()
        session.findById("wnd[1]/usr/txtENAME-LOW").text = ""
        session.findById("wnd[1]/usr/txtENAME-LOW").setFocus()
        session.findById("wnd[1]/usr/txtENAME-LOW").caretPosition = 0
        session.findById("wnd[1]/tbar[0]/btn[8]").press()
        
        session.findById("wnd[1]/usr/cntlALV_CONTAINER_1/shellcont/shell").currentCellRow = 11
        session.findById("wnd[1]/usr/cntlALV_CONTAINER_1/shellcont/shell").selectedRows = "11"
        session.findById("wnd[1]/usr/cntlALV_CONTAINER_1/shellcont/shell").doubleClickCurrentCell()
        
        session.findById("wnd[0]/usr/ctxtP_LFDAT-LOW").setFocus()
        session.findById("wnd[0]/usr/ctxtP_LFDAT-LOW").caretPosition = 1
        session.findById("wnd[0]").sendVKey(4)
        session.findById("wnd[1]/usr/cntlCONTAINER/shellcont/shell").focusDate = today_date_sap_format
        session.findById("wnd[1]/usr/cntlCONTAINER/shellcont/shell").selectionInterval = f"{today_date_sap_format},{today_date_sap_format}"
        
        session.findById("wnd[0]/tbar[1]/btn[8]").press()
        
        # Wait for the report to generate
        time.sleep(5)
        
        session.findById("wnd[0]/mbar/menu[0]/menu[3]/menu[2]").select()
        session.findById("wnd[1]/usr/subSUBSCREEN_STEPLOOP:SAPLSPO5:0150/sub:SAPLSPO5:0150/radSPOPLI-SELFLAG[1,0]").select()
        session.findById("wnd[1]/usr/subSUBSCREEN_STEPLOOP:SAPLSPO5:0150/sub:SAPLSPO5:0150/radSPOPLI-SELFLAG[1,0]").setFocus()
        session.findById("wnd[1]/tbar[0]/btn[0]").press()
        
        session.findById("wnd[1]/usr/ctxtDY_PATH").text = os.path.dirname(saved_path)
        session.findById("wnd[1]/usr/ctxtDY_PATH").setFocus()
        session.findById("wnd[1]/usr/ctxtDY_PATH").caretPosition = 0
        session.findById("wnd[1]").sendVKey(4)
        session.findById("wnd[2]/usr/ctxtDY_FILENAME").text = file_name
        session.findById("wnd[2]/usr/ctxtDY_FILE_ENCODING").text = "0000"
        session.findById("wnd[2]/usr/ctxtDY_FILENAME").caretPosition = len(file_name)
        session.findById("wnd[2]/tbar[0]/btn[0]").press()
        session.findById("wnd[1]/tbar[0]/btn[0]").press()
        
        print("Script executed correctly with today's date. File saved in:", saved_path)
        
        # Wait for file to be completely written
        time.sleep(3)
        
    except Exception as e:
        print(f"Error during SAP automation: {e}")
        exit()

    # --- Post-processing to create Power BI compatible files ---
    try:
        # Define file names and paths for Power BI compatible files
        base_name = "REP_PLR_HOY"
        
        # Use the specified directory C:\Data\Nite
        data_dir = r"C:\Data\Nite"
        
        # Ensure data directory exists
        os.makedirs(data_dir, exist_ok=True)
        print(f"üìÅ Using output directory: {data_dir}")
        
        # Power BI compatible file paths in the data folder
        excel_path = os.path.join(data_dir, f"{base_name}_PowerBI.xlsx")
        csv_path = os.path.join(data_dir, f"{base_name}_PowerBI.csv")
        parquet_path = os.path.join(data_dir, f"{base_name}_PowerBI.parquet")
        
        # Read the HTML file generated by SAP (disguised as XLS)
        # Try different encodings to handle SAP file encoding issues
        content = None
        encodings_to_try = ['utf-8', 'latin-1', 'cp1252', 'iso-8859-1', 'utf-16']
        
        for encoding in encodings_to_try:
            try:
                with open(saved_path, 'r', encoding=encoding) as f:
                    content = f.read()
                print(f"Successfully read file with encoding: {encoding}")
                break
            except UnicodeDecodeError:
                continue
        
        if content is None:
            print("‚ùå Could not read file with any of the attempted encodings")
        
        # Check if it's actually HTML (common SAP behavior)
        if content.strip().startswith('<'):
            print("Detected HTML file with XLS extension - converting for Power BI...")
            # Try to read HTML tables with different encodings
            tables = None
            for encoding in encodings_to_try:
                try:
                    tables = pd.read_html(saved_path, encoding=encoding)
                    print(f"Successfully read HTML tables with encoding: {encoding}")
                    break
                except:
                    continue
            
            if tables is None:
                print("‚ùå Could not read HTML tables with any encoding")
                            
            # Assuming the first table is the one we need
            if tables:
                df = tables[0]
                
                # Clean up the DataFrame - remove any entirely empty rows and columns
                df.dropna(how='all', inplace=True)
                df.dropna(axis=1, how='all', inplace=True)
                
                # Reset index after dropping rows
                df.reset_index(drop=True, inplace=True)
                
                # Power BI Data Transformation and Cleaning
                df = transform_data_for_powerbi(df)
                
                # Save in multiple formats for Power BI compatibility
                save_powerbi_files(df, excel_path, csv_path, parquet_path)
                
            else:
                print("No tables found in the HTML file")
        else:
            # Use specialized SAP file processing (proven to work)
            print("üìä Processing as specialized SAP file...")
            df = process_sap_file_content(saved_path, encodings_to_try)
            
            if df is None:
                print("‚ùå Could not process SAP file")
            df = transform_data_for_powerbi(df)
            save_powerbi_files(df, excel_path, csv_path, parquet_path)
            
    except Exception as e:
        print(f"Error during Power BI file creation: {e}")
        
else:
    print("The current time is before 2 PM. The script is not running.")


def process_sap_file_content(file_path, encodings_to_try):
    """
    Process SAP file with specialized method that works
    """
    try:
        # Read the file line by line to understand its structure
        lines = None
        for encoding in encodings_to_try:
            try:
                with open(file_path, 'r', encoding=encoding) as f:
                    lines = f.readlines()
                print(f"Successfully read file with encoding: {encoding}")
                break
            except:
                continue
        
        if lines is None:
            print("‚ùå Could not read file with any encoding")
            return None
        
        print(f"üìä File has {len(lines)} lines")
        
        # Find the data section (skip headers)
        data_start = None
        for i, line in enumerate(lines):
            if 'Centro' in line and 'Fe.Entrega' in line and 'Ruta' in line:
                data_start = i
                print(f"üìã Found header at line {i+1}")
                break
        
        if data_start is None:
            print("‚ùå Could not find data header")
            return None
        
        # Extract header
        header_line = lines[data_start].strip()
        headers = [col.strip() for col in header_line.split('\t')]
        print(f"üìã Found {len(headers)} columns: {headers[:5]}...")
        
        # Extract data rows
        data_rows = []
        for i in range(data_start + 1, len(lines)):
            line = lines[i].strip()
            if line and not line.startswith('19.09.2025'):  # Skip date headers
                row_data = line.split('\t')
                if len(row_data) >= len(headers):
                    data_rows.append(row_data[:len(headers)])
        
        print(f"üìä Found {len(data_rows)} data rows")
        
        # Create DataFrame
        df = pd.DataFrame(data_rows, columns=headers)
        
        # Clean up the DataFrame
        df.dropna(how='all', inplace=True)
        df.dropna(axis=1, how='all', inplace=True)
        df.reset_index(drop=True, inplace=True)
        
        print(f"‚úÖ DataFrame created with shape: {df.shape}")
        return df
        
    except Exception as e:
        print(f"‚ùå Error processing SAP file content: {e}")
        return None
