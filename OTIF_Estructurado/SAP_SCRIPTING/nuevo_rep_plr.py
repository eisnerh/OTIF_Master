import win32com.client
from datetime import datetime
import os
import pandas as pd
import time

# Check if the current time is after 2 PM
current_hour = datetime.now().hour
if current_hour >= 14:
    today_date_sap_format = datetime.today().strftime('%Y%m%d')
    
    # File path and name
    file_name = "REP_PLR_HOY.xls"
    saved_path = os.path.join(os.environ["USERPROFILE"], "Documents", file_name)
    
    # Remove file if it already exists
    if os.path.exists(saved_path):
        os.remove(saved_path)
    
    # Connect to SAP GUI
    try:
        sap_gui_auto = win32com.client.GetObject("SAPGUI")
        application = sap_gui_auto.GetScriptingEngine
        connection = application.Children(0)
        session = connection.Children(0)
    except Exception as e:
        print(f"Error connecting to SAP: {e}")
        exit()
        
    # SAP automation
    try:
        session.findById("wnd[0]").maximize()
        session.findById("wnd[0]/tbar[0]/okcd").text = "zsd_rep_planeamiento"
        session.findById("wnd[0]").sendVKey(0)
        
        session.findById("wnd[0]/tbar[1]/btn[17]").press()
        session.findById("wnd[1]/usr/txtENAME-LOW").text = ""
        session.findById("wnd[1]/usr/txtENAME-LOW").setFocus()
        session.findById("wnd[1]/usr/txtENAME-LOW").caretPosition = 0
        session.findById("wnd[1]/tbar[0]/btn[8]").press()
        
        session.findById("wnd[1]/usr/cntlALV_CONTAINER_1/shellcont/shell").currentCellRow = 11
        session.findById("wnd[1]/usr/cntlALV_CONTAINER_1/shellcont/shell").selectedRows = "11"
        session.findById("wnd[1]/usr/cntlALV_CONTAINER_1/shellcont/shell").doubleClickCurrentCell()
        
        session.findById("wnd[0]/usr/ctxtP_LFDAT-LOW").setFocus()
        session.findById("wnd[0]/usr/ctxtP_LFDAT-LOW").caretPosition = 1
        session.findById("wnd[0]").sendVKey(4)
        session.findById("wnd[1]/usr/cntlCONTAINER/shellcont/shell").focusDate = today_date_sap_format
        session.findById("wnd[1]/usr/cntlCONTAINER/shellcont/shell").selectionInterval = f"{today_date_sap_format},{today_date_sap_format}"
        
        session.findById("wnd[0]/tbar[1]/btn[8]").press()
        
        # Wait for the report to generate
        time.sleep(5)
        
        session.findById("wnd[0]/mbar/menu[0]/menu[3]/menu[2]").select()
        session.findById("wnd[1]/usr/subSUBSCREEN_STEPLOOP:SAPLSPO5:0150/sub:SAPLSPO5:0150/radSPOPLI-SELFLAG[1,0]").select()
        session.findById("wnd[1]/usr/subSUBSCREEN_STEPLOOP:SAPLSPO5:0150/sub:SAPLSPO5:0150/radSPOPLI-SELFLAG[1,0]").setFocus()
        session.findById("wnd[1]/tbar[0]/btn[0]").press()
        
        session.findById("wnd[1]/usr/ctxtDY_PATH").text = os.path.dirname(saved_path)
        session.findById("wnd[1]/usr/ctxtDY_PATH").setFocus()
        session.findById("wnd[1]/usr/ctxtDY_PATH").caretPosition = 0
        session.findById("wnd[1]").sendVKey(4)
        session.findById("wnd[2]/usr/ctxtDY_FILENAME").text = file_name
        session.findById("wnd[2]/usr/ctxtDY_FILE_ENCODING").text = "0000"
        session.findById("wnd[2]/usr/ctxtDY_FILENAME").caretPosition = len(file_name)
        session.findById("wnd[2]/tbar[0]/btn[0]").press()
        session.findById("wnd[1]/tbar[0]/btn[0]").press()
        
        print("Script executed correctly with today's date. File saved in:", saved_path)
        
        # Wait for file to be completely written
        time.sleep(3)
        
    except Exception as e:
        print(f"Error during SAP automation: {e}")
        exit()

    # --- Post-processing to correct the file for Excel ---
    try:
        # Define new file name and path for the corrected file
        corrected_file_name = "REP_PLR_HOY_CORREGIDO.xlsx"
        corrected_path = os.path.join(os.environ["USERPROFILE"], "Documents", corrected_file_name)
        
        # Read the HTML file generated by SAP (disguised as XLS)
        with open(saved_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Check if it's actually HTML (common SAP behavior)
        if content.strip().startswith('<'):
            print("Detected HTML file with XLS extension - converting...")
            # Read all tables from the HTML
            tables = pd.read_html(saved_path)
            
            # Assuming the first table is the one we need
            if tables:
                df = tables[0]
                
                # Clean up the DataFrame - remove any entirely empty rows and columns
                df.dropna(how='all', inplace=True)
                df.dropna(axis=1, how='all', inplace=True)
                
                # Reset index after dropping rows
                df.reset_index(drop=True, inplace=True)
                
                # Save the DataFrame as a proper Excel file
                df.to_excel(corrected_path, index=False)
                print(f"File corrected and saved as a standard Excel file in: {corrected_path}")
            else:
                print("No tables found in the HTML file")
        else:
            # If it's a real Excel file, just convert it to the new format
            df = pd.read_excel(saved_path)
            df.to_excel(corrected_path, index=False)
            print(f"File converted to standard Excel format: {corrected_path}")
            
    except Exception as e:
        print(f"Error during file correction: {e}")
        
else:
    print("The current time is before 2 PM. The script is not running.")