#!/usr/bin/env python3
"""
Script independiente para limpiar la sesi√≥n SAP
Se ejecuta despu√©s de cada script para asegurar que no queden datos residuales
"""

import sys
import time
from z_devo_alv import attach_to_sap

def limpiar_sesion_sap(session):
    """
    Limpia la sesi√≥n SAP despu√©s de ejecutar un script.
    - Cierra ventanas abiertas
    - Regresa al men√∫ principal
    - Espera a que la sesi√≥n est√© lista
    """
    try:
        # Ir al men√∫ principal
        session.findById("wnd[0]").sendVKey(0)  # Enter
        session.findById("wnd[0]").sendCommand("/n")  # Comando para ir al men√∫ principal
        session.findById("wnd[0]").sendVKey(0)  # Enter

        # Cerrar ventanas adicionales si existen
        for i in range(1, 10):  # M√°ximo 10 ventanas
            try:
                session.findById(f"wnd[{i}]").close()
            except:
                break  # No hay m√°s ventanas

        # Esperar a que la sesi√≥n est√© lista
        while not session.findById("wnd[0]/usr").Text:
            time.sleep(0.5)

        print("‚úÖ Sesi√≥n SAP limpiada correctamente.")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è Error al limpiar la sesi√≥n SAP: {e}")
        return False

def main():
    """Funci√≥n principal para limpiar la sesi√≥n SAP"""
    try:
        # Conectar a SAP
        _, _, session = attach_to_sap(-1, -1)
        
        # Limpiar sesi√≥n
        success = limpiar_sesion_sap(session)
        
        if success:
            print("üßπ Limpieza de sesi√≥n SAP completada exitosamente")
            sys.exit(0)
        else:
            print("‚ùå Error en la limpieza de sesi√≥n SAP")
            sys.exit(1)
            
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
