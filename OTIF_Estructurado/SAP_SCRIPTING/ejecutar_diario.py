#!/usr/bin/env python3
"""
üïê SCRIPT DE EJECUCI√ìN DIARIA
============================

Este script est√° dise√±ado para ejecutarse diariamente y extraer
autom√°ticamente todos los reportes de SAP con la l√≥gica de fechas
apropiada.

Uso:
- Programar en Task Scheduler de Windows para ejecuci√≥n diaria
- Ejecutar manualmente para pruebas
- Genera logs detallados de la ejecuci√≥n

Funcionalidades:
‚úÖ Ejecuci√≥n autom√°tica diaria
‚úÖ L√≥gica de fechas inteligente
‚úÖ Logs detallados
‚úÖ Notificaciones de estado
‚úÖ Manejo de errores robusto
"""

import sys
import os
import json
import logging
from datetime import datetime
from automatizacion_reportes_sap import AutomatizacionSAP

# Configurar logging para ejecuci√≥n diaria
def configurar_logging():
    """
    Configura el sistema de logging para ejecuci√≥n diaria
    """
    # Crear directorio de logs si no existe
    log_dir = r"C:\Data\SAP_Automatizado\Logs"
    os.makedirs(log_dir, exist_ok=True)
    
    # Nombre del archivo de log con fecha
    fecha_log = datetime.now().strftime('%Y%m%d')
    log_file = os.path.join(log_dir, f"ejecucion_diaria_{fecha_log}.log")
    
    # Configurar logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_file, encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
    
    return logging.getLogger(__name__)

def cargar_configuracion():
    """
    Carga la configuraci√≥n desde el archivo JSON
    """
    try:
        config_path = os.path.join(os.path.dirname(__file__), 'configuracion_reportes.json')
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        return config
    except Exception as e:
        print(f"‚ùå Error cargando configuraci√≥n: {e}")
        return None

def verificar_requisitos():
    """
    Verifica que se cumplan los requisitos para la ejecuci√≥n
    """
    logger = logging.getLogger(__name__)
    
    # Verificar que SAP GUI est√© disponible
    try:
        import win32com.client
        sap_gui_auto = win32com.client.GetObject("SAPGUI")
        if not sap_gui_auto:
            logger.error("‚ùå SAP GUI no est√° disponible")
            return False
        logger.info("‚úÖ SAP GUI disponible")
    except Exception as e:
        logger.error(f"‚ùå Error verificando SAP GUI: {e}")
        return False
    
    # Verificar directorios
    directorios = [
        r"C:\Data\SAP_Automatizado",
        r"C:\Data\SAP_Automatizado\Logs",
        r"C:\Data\SAP_Automatizado\Backup"
    ]
    
    for directorio in directorios:
        try:
            os.makedirs(directorio, exist_ok=True)
            logger.info(f"‚úÖ Directorio verificado: {directorio}")
        except Exception as e:
            logger.error(f"‚ùå Error creando directorio {directorio}: {e}")
            return False
    
    return True

def enviar_notificacion(estado, mensaje, config):
    """
    Env√≠a notificaci√≥n del resultado de la ejecuci√≥n
    """
    logger = logging.getLogger(__name__)
    
    if not config.get('notificaciones', {}).get('enviar_email', False):
        logger.info("üìß Notificaciones por email deshabilitadas")
        return
    
    # Aqu√≠ se podr√≠a implementar env√≠o de email
    # Por ahora solo se registra en el log
    logger.info(f"üìß Notificaci√≥n: {estado} - {mensaje}")

def crear_resumen_ejecucion(resultado, inicio, fin):
    """
    Crea un resumen de la ejecuci√≥n
    """
    logger = logging.getLogger(__name__)
    
    duracion = fin - inicio
    
    resumen = {
        'fecha_ejecucion': inicio.strftime('%Y-%m-%d %H:%M:%S'),
        'duracion_minutos': round(duracion.total_seconds() / 60, 2),
        'estado': 'EXITOSO' if resultado else 'FALLIDO',
        'hora_fin': fin.strftime('%Y-%m-%d %H:%M:%S')
    }
    
    # Guardar resumen en archivo JSON
    resumen_dir = r"C:\Data\SAP_Automatizado\Logs"
    fecha_str = inicio.strftime('%Y%m%d')
    resumen_file = os.path.join(resumen_dir, f"resumen_{fecha_str}.json")
    
    try:
        with open(resumen_file, 'w', encoding='utf-8') as f:
            json.dump(resumen, f, indent=2, ensure_ascii=False)
        logger.info(f"üìã Resumen guardado: {resumen_file}")
    except Exception as e:
        logger.error(f"‚ùå Error guardando resumen: {e}")
    
    return resumen

def main():
    """
    Funci√≥n principal de ejecuci√≥n diaria
    """
    # Configurar logging
    logger = configurar_logging()
    
    # Marcar inicio
    inicio_ejecucion = datetime.now()
    
    logger.info("üöÄ INICIANDO EJECUCI√ìN DIARIA DE REPORTES SAP")
    logger.info("=" * 80)
    logger.info(f"üìÖ Fecha: {inicio_ejecucion.strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info(f"üíª Usuario: {os.getenv('USERNAME', 'Desconocido')}")
    logger.info(f"üñ•Ô∏è Sistema: {os.getenv('COMPUTERNAME', 'Desconocido')}")
    logger.info("=" * 80)
    
    try:
        # Cargar configuraci√≥n
        logger.info("üìã Cargando configuraci√≥n...")
        config = cargar_configuracion()
        if not config:
            logger.error("‚ùå No se pudo cargar la configuraci√≥n")
            return False
        
        # Verificar requisitos
        logger.info("üîç Verificando requisitos...")
        if not verificar_requisitos():
            logger.error("‚ùå Requisitos no cumplidos")
            return False
        
        # Crear instancia de automatizaci√≥n
        logger.info("üîß Inicializando automatizaci√≥n SAP...")
        automatizacion = AutomatizacionSAP()
        
        # Ejecutar automatizaci√≥n
        logger.info("‚ö° Ejecutando extracci√≥n de reportes...")
        resultado = automatizacion.main()
        
        # Marcar fin
        fin_ejecucion = datetime.now()
        
        # Crear resumen
        resumen = crear_resumen_ejecucion(resultado, inicio_ejecucion, fin_ejecucion)
        
        # Enviar notificaci√≥n
        if resultado:
            logger.info("üéâ EJECUCI√ìN COMPLETADA EXITOSAMENTE")
            enviar_notificacion("EXITOSO", "Todos los reportes se extrajeron correctamente", config)
        else:
            logger.error("‚ùå EJECUCI√ìN FALL√ì")
            enviar_notificacion("FALLIDO", "Algunos reportes no se pudieron extraer", config)
        
        # Log final
        logger.info("=" * 80)
        logger.info("üìä ESTAD√çSTICAS DE EJECUCI√ìN")
        logger.info("=" * 80)
        logger.info(f"‚è±Ô∏è Duraci√≥n total: {resumen['duracion_minutos']} minutos")
        logger.info(f"üìà Estado: {resumen['estado']}")
        logger.info(f"üìÅ Directorio de salida: {automatizacion.output_dir}")
        logger.info("=" * 80)
        
        return resultado
        
    except KeyboardInterrupt:
        logger.warning("‚ö†Ô∏è Ejecuci√≥n interrumpida por el usuario")
        return False
        
    except Exception as e:
        logger.error(f"‚ùå Error inesperado en ejecuci√≥n diaria: {e}")
        return False

if __name__ == "__main__":
    try:
        exito = main()
        sys.exit(0 if exito else 1)
    except Exception as e:
        print(f"‚ùå Error cr√≠tico: {e}")
        sys.exit(1)
